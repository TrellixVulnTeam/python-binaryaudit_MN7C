#!/usr/bin/python3

# Tool to orchestrate the abi checker workflow

import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import argparse
import datetime
import inspect

from binaryaudit.db_wrapper import abichecker_db_wrapper 
from dateutil.parser import parse

ABICHECKER_TOOL_DBG_PREFIX="abicheckerorchestrator::"

class debuglogger:
    '''
    '''
    def __init__(self, verbose):
        self.verbose = verbose

    def print_debug_logs(self, msg) -> None:
        '''
        Debug logger for abichecker orchestrator module
        '''
        if self.verbose == False:
            return

        frameinfo = inspect.getouterframes(inspect.currentframe())
        (frame, source, lineno, func, lines, index) = frameinfo[1]
        caller_log = "%s:%s::" % (func, lineno)
        print(ABICHECKER_TOOL_DBG_PREFIX, caller_log, msg)


class abicheckerorchestrator:
    '''
    ABI checker orchestrator class for the trigger the abi checker functionality.
    '''

    def __init__(self, distroname, derivative, build_id, telemetery, logger):
        '''
        '''
        self.debug_log = logger
        self.distroname = distroname
        self.derivative = derivative
        self.build_id = build_id
        self.product_id = 0
        self.enable_telemetry = telemetery

        # Instantiate the db connection to upload results to DB
        if self.enable_telemetry == 'y':
            self.db_conn = abichecker_db_wrapper("db_config", self.debug_log)
            self.db_conn.abichecker_initialize_db()

    def initalize_product_id(self) -> None:
        '''
        '''
        if self.db_conn.is_abichecker_db_connected:
            product_id = self.db_conn.abichecker_get_product_id(
                    abicheckermodule.distroname,
                    abicheckermodule.derivative
            )
            self.debug_log.print_debug_logs("Product_id: %s" % product_id)
        else:
            self.debug_log("Not connected")


# Start
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    required_args = parser.add_argument_group('mandatory arguments')

    required_args.add_argument('-b', '--build_id', action='store', required=True,
                        help="build id of distro build")
    required_args.add_argument('-d', '--distroname', action='store', required=True,
                        help="Distribution name")
    required_args.add_argument('-e', '--derivative', action='store', required=True,
                        help="Derivative name")
    parser.add_argument('-u', '--buildurl', action='store', required=False,
                        help="Build URL")
    parser.add_argument('-l', '--logurl', action='store', required=False,
                        help="URL of log files")
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="enable verbose")
    parser.add_argument('-t', '--enabletelemetry', action='store', required=False,
                        default="n", help="Enable the data storing to telemetry (default: n)")

    args = parser.parse_args()

    # logger for logging the debug messages
    logger = debuglogger(args.verbose)

    # Instantiate the abicheckermodule object and process the package test logs
    abicheckermodule = abicheckerorchestrator(
            args.distroname,
            args.derivative,
            args.build_id,
            args.enabletelemetry,
            logger
    )

    abicheckermodule.initalize_product_id()
