#!/usr/bin/python3

import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from binaryaudit import util
from binaryaudit import abicheck
from binaryaudit import cli
from binaryaudit.db import orchestrator as db_orchestrator

args = cli.arg_parser.parse_args()

util.set_verbosity(args.verbose)

import dumper
dumper.dump(args)

db_orchestrator = None
if 'y' == args.enable_telemetry:
    cli.validate_telemetry_args(args)
    db_orchestrator = db_orchestrator(
            args.product_name,
            args.derivative,
            args.build_id,
            args.enable_telemetry,
            util.logger
    )
    db_orchestrator.initalize_product_id()

if None is args.cmd:
    if not None is args.is_elf:
        if abicheck.is_elf(args.is_elf):
            util.note("'{}' is an ELF binary".format(args.is_elf))
            sys.exit(0)
        util.note("'{}' is not an ELF binary".format(args.is_elf))
        sys.exit(3)
elif "rpm" == args.cmd:
    if "list" == args.rpm_cmd:
        if None is args.source_dir or None is args.out_filename:
            util.error("Pass package directory and JSON output file")
            sys.exit(1)
        abicheck.generate_package_json(args.source_dir, args.out_filename)
elif "db" == args.cmd:
    pass
else:
    # This should be caught by argparse anyway
    raise("Unknown command '{}'".format(args.cmd))

